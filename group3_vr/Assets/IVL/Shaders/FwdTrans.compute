// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel MultiplyWToL
#pragma kernel MultiplyLToW
#pragma kernel movePoints
#pragma kernel executeFDEUB
#pragma kernel MultiplyWToLNorm
#pragma kernel MultiplyLToWNorm
#pragma kernel MultiplyWToLObs
#pragma kernel MultiplyLToWObs
#pragma kernel MultiplyWToLPla
#pragma kernel MultiplyLToWPla

#define lineSize 32
#define nbLineKernel 32

// float lineNumber
uint lineNb;
uint obsNb;

// Transform Matrices
float4x4 matwToL;
float4x4 matlToW;

// Delta Simulation
float delta;
// Max allowed displacement
float maxDelta;
// Spring coeff
float k;
// Repulsion coeff
float kr;
// Attraction coeff
float ka;
// Obstacle repulsion coeff
float kor;
float dmin;
//Normal Attraction
float dmax;
float fmax;
//Plane Attraction
float dmaxP;
float fmaxP;
uint nbPlane;


float m00;
float m01;
float m02;

float m10;
float m11;
float m12;

float m20;
float m21;
float m22;


float im00;
float im01;
float im02;

float im10;
float im11;
float im12;

float im20;
float im21;
float im22;



// Create a RenderTexture with enableReadWrite flag and set it
// with cs.SetTexture
// Struct: [p00,p01,..,p0m,...,pn0,...pnm]
RWStructuredBuffer<float3> pos;
RWStructuredBuffer<float3> dispVec;
// Create BundleId
// Struct: [idl1, idl2, .., idln]
RWStructuredBuffer<int> bundleId;
// Create a RenderTexture with enableReadWrite flag and set it
// Struct: [l0,l1,...,lm] for both
RWStructuredBuffer<float3> normSrcVec;
RWStructuredBuffer<float3> normDestVec;
// Create a RenderTexture for the points to avoid
RWStructuredBuffer<float3> avoidPoints;
// Create a RenderTexture for the attractive plane
RWStructuredBuffer<float3> attracPlane;

[numthreads(lineSize, 1, 1)] // VALIDATED
void MultiplyWToL(uint3 id : SV_DispatchThreadID)
{
	pos[id.x] = mul(matwToL, float4(pos[id.x].xyz, 1.0)).xyz;
}

[numthreads(lineSize, 1, 1)] // VALIDATED
void MultiplyLToW(uint3 id : SV_DispatchThreadID)
{
	pos[id.x].xyz = mul(matlToW, float4(pos[id.x], 1.0)).xyz;
	dispVec[id.x].xyz = mul(matlToW, float4(dispVec[id.x], 0.0)).xyz; // only in the Local to World conversion. w = 0.0 cause it is a vector
}

[numthreads(nbLineKernel, 1, 1)] // VALIDATED
void MultiplyWToLNorm(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= lineNb) {
		return;
	}
	normSrcVec[id.x] = mul(matwToL, float4(normSrcVec[id.x], 0.0)).xyz;
	normDestVec[id.x] = mul(matwToL, float4(normDestVec[id.x], 0.0)).xyz;
}

[numthreads(nbLineKernel, 1, 1)] // VALIDATED
void MultiplyLToWNorm(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= lineNb) {
		return;
	}
	normSrcVec[id.x].xyz = mul(matlToW, float4(normSrcVec[id.x], 0.0)).xyz;
	normDestVec[id.x].xyz = mul(matlToW, float4(normDestVec[id.x], 0.0)).xyz;
}

[numthreads(1, 1, 1)] // VALIDATED // Could be faster with higher thread dim (but not necessary for testing)
void MultiplyWToLObs(uint3 id : SV_DispatchThreadID)
{
	avoidPoints[id.x] = mul(matwToL, float4(avoidPoints[id.x], 1.0)).xyz;
}

[numthreads(1,1,1)] // VALIDATED // Could be faster with higher thread dim (but not necessary for testing)
void MultiplyLToWObs(uint3 id : SV_DispatchThreadID)
{
	avoidPoints[id.x] = mul(matlToW, float4(avoidPoints[id.x], 1.0)).xyz;
}


[numthreads(1, 1, 1)] // NOT VALIDATED // Could be faster with higher thread dim (but not necessary for testing)
void MultiplyWToLPla(uint3 id : SV_DispatchThreadID)
{
	attracPlane[id.x] = mul(matwToL, float4(attracPlane[id.x], 1.0)).xyz;
}

[numthreads(1,1,1)] // NOT VALIDATED // Could be faster with higher thread dim (but not necessary for testing)
void MultiplyLToWPla(uint3 id : SV_DispatchThreadID)
{
	attracPlane[id.x] = mul(matlToW, float4(attracPlane[id.x], 1.0)).xyz;
}


// Fonction to get the Perspective Projection from points
float2 getPersProj(float3 pt, float nearPlane)
{
	return nearPlane / pt.z * pt.xy;
}


// Fonction to get the unit vector to go towards a line in 3D. (i.e. get rejection vector from line projection)
// ptLine is the 3D space position of the line (we have pt + vector for line)
// If we want to compute the rejection from the origin, just specify that ptLine = (0.0,0.0,0.0)
float3 getLineRejectionVector(float3 pt, float3 ptLine, float3 lineVector)
{
	float3 vecPtToLine = ptLine - pt;
	float3 normal = normalize(lineVector);
	return normalize(dot(vecPtToLine, normal) * normal - vecPtToLine);
}

// Fonction to get the unit vector to go towards a plane in 3D. (i.e. get rejection vector from plane proj)
// ptPlane is the 3D space position of the plane (we have pt + 2 vectors for plane)
// If we want to compute the rejection from a plane from origin, just specify that ptPlane = (0.0,0.0,0.0)
float3 getPlaneRejectionVector(float3 pt, float3 ptPlane, float3 planeVec1, float3 planeVec2, float3 normPlan)
{
	float3 vecPtToPlane = ptPlane - pt;
	//float3 normal = normalize(cross(planeVec1, planeVec2));
	float3 normal = normalize(normPlan);
	return normalize(dot(vecPtToPlane, normal) * normal);
}

// Fonction to get the unit vector to go towards a pt in spherical space (i.e. the bearing to the destination from the start point)
// Note: pt and destPt don't need to be normalize before cause we do that inside the method.
float3 getSphereDirToPoint(float3 pt, float3 destPt)
{
	float3 normPt = normalize(pt);
	float3 normDestPt = normalize(destPt);
	// First we get the vector orthognal to both Pt and desPt = vecOrth
	//Then we find the vector that is orthogonal to Pt and vecOrth = the direction to destPt in the tangent plane of pt.
	return cross(normPt, cross(normPt, normDestPt));
}

// Fonction to get the unit vector to go towards a line in spherical space (i.e. the direction to rejoin a track)
float3 getSphereDirtoLine(float3 pt, float3 linePt, float3 lineDir)
{
	float3 normPt = normalize(pt);
	float3 normLinePt = normalize(linePt);
	float3 normLineDir = normalize(lineDir);
	// First we get the vector orthogonal to the line Pt and the line direction = vecOrth.
	// Then we find the vector that is orthogonal to Pt and vecOrht.
	return cross(normPt, cross(normLinePt, normLineDir));
}

float3 multiplyByRotation(float3 v) {
	float x = m00 * v.x + m01 * v.y + m02 * v.z;
	float y = m10 * v.x + m11 * v.y + m12 * v.z;
	float z = m20 * v.x + m21 * v.y + m22 * v.z;

	return float3(x, y, z);
}

float3 multiplyByInverse(float3 v) {
	float x = im00 * v.x + im01 * v.y + im02 * v.z;
	float y = im10 * v.x + im11 * v.y + im12 * v.z;
	float z = im20 * v.x + im21 * v.y + im22 * v.z;

	return float3(x, y, z);
}

//Function to calculate the distance between plane and point
float getDistancePlanePoint(float3 pt, float3 planPt, float3 planNorm) //NOT VALIDATED
{
	float d = -planNorm.x*planPt.x -planNorm.y*planPt.y -planNorm.z*planPt.z;
	float distance = abs(planNorm.x*pt.x + planNorm.y*pt.y + planNorm.z*pt.z + d )/sqrt(pow(planNorm.x, 2) + pow(planNorm.y, 2) + pow(planNorm.z, 2));
	return distance;
}

//Function to calculate the effect of the plane on the point
float3 calculatePlaneEffect(float3 pt, float3 planNorm, float3 planForward, float3 planRight, float3 ptPlan) //NOT VALIDATED
{
	float dist = getDistancePlanePoint(pt, ptPlan, planNorm);
	//float3 vecT = normalize(pj - pi);
	//float3 vecT = - normalize(planNorm);
	float3 vecT = getPlaneRejectionVector(pt, ptPlan, planRight, planForward, planNorm);
	return dist > 0.0000001 ? fmaxP / pow(dist, 2) * vecT : float3(0.0, 0.0, 0.0);
}

// Fonction to compute the spring effect force - In othographic coordinates
float3 calculateSpringEffect(float3 prevPt, float3 pt, float3 nextPt, float kSpring, float l0) // VALIDATED
{	
	//2D proj versio
	//float3 prevVec = normalize(prevPt - pt);
	//float3 nextVec = normalize(pt - nextPt);
	//float nearPlane = 0.01; // 0.05
	//float2 projPt = getPersProj(pt, nearPlane);
	//// Using perspective proj
	//float projDistPrev = distance(getPersProj(prevPt, nearPlane), projPt) - l0;
	//float projDistNext = distance(getPersProj(nextPt, nearPlane), projPt) - l0;
	// Test projection on sphere
	//float projDistPrev = atan(abs(cross(prevPt, pt)) / dot(prevPt, pt));
	//float projDistNext = atan(abs(cross(nextPt, pt)) / dot(nextPt, pt));
	//return kSpring * (projDistPrev * prevVec - projDistNext * nextVec); 
	// Old 3D version
	return kSpring * (prevPt + nextPt - 2 * pt); 
}


// Fonction to compute the repulsive force - in user made orthographic projection

// Fonction to compute the repulsive force
// Pi is the point on which we compute the repulsion exerted by pj.
float3 calculateLinkRepulsion(float3 pj, float3 pi, float kRep, float distThres)
{
	float3 normi = normalize(pi);
	float3 normj = normalize(pj);
	float dist = atan(length(cross(normj, normi)) / dot(normj, normi));
	float kCorrect = length(pi) / length(pj);
	float3 vecT = cross(normi, cross(normalize(pj - pi), normi));
	return (dist > 0.00000001 && dist < distThres) ? kRep * kCorrect / pow(dist, 2) * vecT : float3(0.0, 0.0, 0.0); // square distance stuff
}

float3 calculateLinkAttraction(float3 pj, float3 pi, float3 linkDir, float kAttract)
{
	float dist = distance(pj, pi);
	//float3 vecT = normalize(pj - pi);
	float3 vecT = cross(linkDir, cross(normalize(pj - pi), linkDir));
	return dist > 0.0000001 ? kAttract / pow(dist, 2) * vecT : float3(0.0, 0.0, 0.0);
}

// Fonction to compute the Normal effect force - in orthographic coordinates
float3 calculateNormalEffect(float3 n, float3 p0, float3 pi, float dmax, float fmax) // VALIDATED
{
	float3 p0i = pi - p0;
	float3 normal = normalize(n);
	float dist = length(p0i.xyz);// , vect0.xyz);
	float fNorm = dist <= dmax ? fmax * dmax * dmax / (length(p0i) * length(p0i)) : 0; //* (1 - (pow(length(p0i) - dmax, 2) / pow(dmax, 2)));
	p0i = normalize(p0i);
	float3 dir = normalize(dot(p0i, normal) * normal - p0i);
	return fNorm * dir;
}



// Compute displacement of points at a given "snapshot" t
[numthreads(lineSize, 1, 1)]
void executeFDEUB(uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupThreadID, uint3 lineIndex : SV_GroupID)
{
	// Do not run this kernel if the line position is the first or last element of a line
	if (groupId.x == 0 || groupId.x >= (lineSize - 1))
	{
		return;
	}

	int m = lineIndex.x;

	// Spring force
	float3 fs = float3(0.0, 0.0, 0.0); // spring force
	float kCorrect = k / distance(pos[(m + 1) * lineSize - 1].xyz, pos[m * lineSize].xyz);
	// in 2D perspective space / distance(getPersProj(0.05, pos[(m + 1) * lineSize - 1].xyz), getPersProj(0.05, pos[m * lineSize].xyz));
	// in 3D / distance(pos[(m + 1) * lineSize - 1].xyz, pos[m * lineSize].xyz)
	fs = calculateSpringEffect(pos[id.x - 1], pos[id.x], pos[id.x + 1], kCorrect, 0.0);
		
	// Compute the repulsing force of each other lines
	//float3 testDir = normalize(pos[id.x - 1] + pos[id.x + 1] - 2 * pos[id.x]); // Direction of the line - Useless now?
	float3 fr = float3(0.0, 0.0, 0.0);
	float3 fa = float3(0.0, 0.0, 0.0);
	for (uint i = 0; i < lineNb; i++)
	{
		if (i == lineIndex.x)
		{
			//fr.xyz += distance(pos[i * lineSize], pos[id.x]) <= dmax ? calculateLinkRepulsion(pos[i * lineSize], pos[id.x], kr) : 0;
			//fr.xyz += distance(pos[(i + 1) * lineSize - 1], pos[id.x]) <= dmax ? calculateLinkRepulsion(pos[(i + 1) * lineSize - 1], pos[id.x], kr) : 0;
			continue;
		}
		for (uint j = 0; j < lineSize; j++)
		{
			if (bundleId[m] != bundleId[i])
			{
				// Compute repulsion
				float3 test = calculateLinkRepulsion(pos[i * lineSize + j], pos[id.x], kr, 1000); //
				if (length(test) > 0.00001)
				{
					fr.xyz += test;// cross(testDir, cross(test, testDir));
				}
				//fr.xyz += length(test) > 0.0001 ? cross(testDir, cross(test, testDir)) : float3(0.0, 0.0, 0.0);
			}
			else {
				// Compute attraction
				float3 testDir = normalize(pos[id.x - 1] - pos[id.x]); // Vector direction of link
				//float3 testDir = normalize(pos[id.x - 1] + pos[id.x + 1] - 2 * pos[id.x]); // Vector direction of link
				fa.xyz += calculateLinkAttraction(pos[i * lineSize + j], pos[id.x], testDir, ka);
			}
		}
	}

	// Origin/Destination Force
	float3 fp = float3(0.0, 0.0, 0.0);
	fp += calculateNormalEffect(normSrcVec[m], pos[m * lineSize], pos[id.x], dmax, fmax);
	fp += calculateNormalEffect(normDestVec[m], pos[(m + 1) * lineSize - 1], pos[id.x], dmax, fmax);

	// Obstacle repulsion force - We use the same reuplsion model as for the link but with different coeff
	float3 fo = float3(0.0, 0.0, 0.0);
	for (uint k = 0; k < obsNb; k++)
	{
		fo += abs(calculateLinkRepulsion(avoidPoints[k], pos[id.x], kor, dmin / length(avoidPoints[k])));
		fo = fo * float3(1, 0, 0);
	//	// NB: Here we divide the distance threshold by the lenght (i.e. distance to eye) of the opbstacle).
	//	// Doing this counteract the change of angular resolution based on distance
	//	// This means that we always repulse until a distance from obstacle that is independent from pov.
	}

	float3 fap = float3(0.0, 0.0, 0.0);

	for (uint k = 0; k < nbPlane*4; k=k+4)
	{
		//fap += calculatePlaneEffect(pos[id.x], attracPlane[k+3], attracPlane[k+2], attracPlane[k+1], attracPlane[k]);
	}
	// Add displacement to the displacement matrix
	float3 mfr = multiplyByRotation(fr);
	
	mfr = float3(mfr.x, abs(mfr.y), mfr.z);

	float3 cfr = multiplyByInverse(mfr);



	//fr = float3(fr.x, abs(fr.y), fr.z);
	dispVec[id.x] = fs + fa + cfr + fo + fp;


	//dispVec[id.x] = dispVec[id.x] > 0 ? dispVec[id.x] : float3(0,0,0);
	//dispVec[id.x].z = dispVec[id.x].z);
}

// Apply all displacement at once
[numthreads(lineSize, 1, 1)]
void movePoints(uint3 id : SV_DispatchThreadID)
{
	float3 move = delta * dispVec[id.x].xyz;
	if (length(move.xyz) > maxDelta)
	{
		move.xyz = maxDelta * normalize(move.xyz);
	}
	pos[id.x].xyz += move.xyz;
}